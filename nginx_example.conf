server {
    server_name telegramnotify.godjango.dev www.telegramnotify.godjango.dev;
    listen 80;
    return 301 https://telegramnotify.godjango.dev$request_uri;
}


server {
#listen 443 ssl;
#listen 80;
#listen [::]:80;

listen 443 ssl;
listen [::]:443 ssl;

root /var/www/php/telegramnotify/public/;

index index.html index.htm index.php;

server_name telegramnotify.godjango.dev;
# ssl on;
ssl_certificate /etc/letsencrypt/live/telegramnotify.godjango.dev/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/telegramnotify.godjango.dev/privkey.pem;

client_max_body_size 4G;
#access_log /var/www/php/store/logs/nginx-access.log;
#error_log /var/www/php/store/logs/nginx-error.log;


#location /lgoin/ {
#alias   /var/www/php/coffee/public/vendor/;
#}
location / {

        try_files $uri $uri/ /index.php?$query_string;
                        # try_files $uri $uri/ /index.php$is_args$args;
 location ~ \.php$ {
   # try_files $uri =404;
   # fastcgi_pass unix:/run/php/php7.3-fpm.sock;
  #  fastcgi_index index.php;
#    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 #   include fastcgi_params;
                        include snippets/fastcgi-php.conf;
                                   fastcgi_pass unix:/run/php/php8.1-fpm.sock;
  }
#location /login {
# try_files $uri $uri/ /login.php?q=$request_uri;
#}



#location /backend/ {
#       alias ../backend/
#}

# an HTTP header important enough to have its own Wikipedia entry:
#   http://en.wikipedia.org/wiki/X-Forwarded-For
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# enable this if and only if you use HTTPS, this helps Rack
# set the proper protocol for doing redirects:
        #proxy_set_header X-Forwarded-Proto https;
# pass the Host: header from the client right along so redirects
# can be set properly within the Rack application
        #proxy_set_header Host $http_host;
# we don't want nginx trying to do something clever with
# redirects, we set the Host: header above already.
        #proxy_redirect off;
# set "proxy_buffering off" *only* for Rainbows! when doing# Comet/long-poll stuff.  It's also safe to set if you're
# using only serving fast clients with Unicorn + nginx.
# Otherwise you _want_ nginx to buffer responses to slow
# clients, really.
# proxy_buffering off;
# Try to serve static files from nginx, no point in making an
# *application* server like Unicorn/Rainbows! serve static files.

#if (!-f $request_filename) {
#       proxy_pass http://casapiedra;
#       break;
#}
}
# Error pages
error_page 500 502 503 504 /500.html;

#location = /500.html {
#root /var/www/cloudfood/casapiedra/static/;
}
#}




server {
#listen 443 ssl;
listen 443 ssl;
listen [::]:443 ssl;
root /var/www/php/telegramnotify/public/;

index index.html index.htm index.php;

server_name www.telegramnotify.godjango.dev;
# ssl on;
ssl_certificate /etc/letsencrypt/live/www.telegramnotify.godjango.dev/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/www.telegramnotify.godjango.dev/privkey.pem;

client_max_body_size 4G;
#access_log /var/www/php/store/logs/nginx-access.log;
#error_log /var/www/php/store/logs/nginx-error.log;


#location /lgoin/ {
#alias   /var/www/php/coffee/public/vendor/;
#}
location / {

        try_files $uri $uri/ /index.php?$query_string;
                        # try_files $uri $uri/ /index.php$is_args$args;
 location ~ \.php$ {
   # try_files $uri =404;
   # fastcgi_pass unix:/run/php/php7.3-fpm.sock;
  #  fastcgi_index index.php;
#    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 #   include fastcgi_params;
                        include snippets/fastcgi-php.conf;
                                   fastcgi_pass unix:/run/php/php8.1-fpm.sock;
  }
#location /login {
# try_files $uri $uri/ /login.php?q=$request_uri;
#}



#location /backend/ {
#       alias ../backend/
#}

# an HTTP header important enough to have its own Wikipedia entry:
#   http://en.wikipedia.org/wiki/X-Forwarded-For
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# enable this if and only if you use HTTPS, this helps Rack
# set the proper protocol for doing redirects:
        #proxy_set_header X-Forwarded-Proto https;
# pass the Host: header from the client right along so redirects
# can be set properly within the Rack application
        #proxy_set_header Host $http_host;
# we don't want nginx trying to do something clever with
# redirects, we set the Host: header above already.
        #proxy_redirect off;
# set "proxy_buffering off" *only* for Rainbows! when doing# Comet/long-poll stuff.  It's also safe to set if you're
# using only serving fast clients with Unicorn + nginx.
# Otherwise you _want_ nginx to buffer responses to slow
# clients, really.
# proxy_buffering off;
# Try to serve static files from nginx, no point in making an
# *application* server like Unicorn/Rainbows! serve static files.

#if (!-f $request_filename) {
#       proxy_pass http://casapiedra;
#       break;
#}
}
# Error pages
error_page 500 502 503 504 /500.html;

#location = /500.html {
#root /var/www/cloudfood/casapiedra/static/;
}
#}
